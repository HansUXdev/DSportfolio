// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © LivingDraculaOG

//@version=5
indicator('Pivot Candles', overlay=true, max_lines_count=500, max_labels_count=500, max_boxes_count=500)

////////////////////
// Variables
////////////////////

redCandle  = close < open
greenCandle =  close > open

option_pivot1 = 'All'
option_pivot2 = 'New only'
option_pivot3 = 'None'
option_pivot_label1 = 'Levels'
option_pivot_label2 = 'Levels & Price'
option_pivot_label3 = 'Price'

t_PP = 'PP'
t_R5 = 'R⁵'
t_R4 = 'R⁴'
t_R3 = 'R³'
t_R2 = 'R²'
t_R1 = 'R¹'
t_S1 = 'S¹'
t_S2 = 'S²'
t_S3 = 'S³'
t_S4 = 'S⁴'
t_S5 = 'S⁵'
t_BC = 'BC'
t_TC = 'TC'

c_none                  = color.new(color.black, 100)
i_pivots_line_transp    = 30
i_pivots_line_thickness = 1
i_pivots_zone_transp    = 96

patternLabelPosLow = low - ta.atr(30) * 0.6
patternLabelPosHigh = high + ta.atr(30) * 0.6


////////////////////
// Inputs
////////////////////




////////////////////////////////////////////////////////////////////
// SUPPORT & RESISTENCE with Breakout
////////////////////////////////////////////////////////////////////


_group_SR               = "Support and Resistance Candles"

usePivotTimeframe       = input.string('D', 'Pivots timeframe', group=_group_SR, inline="0", options=['60', '120', '240', '360', '720', 'D', 'W', 'M', '6M', '12M'])
usePivotType            = input.string('Woodie', 'Type',        group=_group_SR, inline="0", options=['Traditional', 'Fibonacci', 'Woodie', 'Classic', 'DM', 'Camarilla', 'Expected Pivot Points'])

i_pivots_line_style     = line.style_dotted               //input.string(line.style_dotted, 'Line style ', options=[line.style_solid, line.style_dotted, line.style_dashed])
showPivots              = input.bool(false, 'Show',       group=_group_SR, inline="0")
showPreviousPivots      = true // = input.bool(true, 'Show',               group="pivots", inline="0")
showPreviousPivots2     = input.bool(false, 'history',           group=_group_SR, inline="0")

i_pivots_label_show     = input.bool(true, 'Labels', group= _group_SR, inline="label")
i_pivots_label          = input.string(option_pivot_label2, '', options=[option_pivot_label1, option_pivot_label2, option_pivot_label3], group= _group_SR, inline='label')
i_pivots_label_position = input.string('Right', '', options=['Right', 'Left'], group=_group_SR, inline="label")
i_pivots_show_zone      = input.bool(true, 'BG', group=_group_SR, inline='label')

// input_show_basic    = input.bool(false, 'show', group="basic analysis", inline='')
// BULLcolor           = input.color(defval=color.new(#ffffff, 0), title='Bullish', inline='03', group="basic analysis", tooltip="If the open is above R1 but the close is below R1, this is a sign of weakness in the bulls. It suggests that the bears are starting to gain control and that the price may be headed lower. ")
// BEARcolor           = input.color(defval=color.new(#000000, 0), title='Bearish', inline='03', group="basic analysis")
// BreakOUTcolor       = input.color(defval=color.new(#90EE90, 0), title='Breakout', inline='03', group="basic analysis")
i_show_resistance       = input.bool(false, 'Resistance',  inline='03', group=_group_SR)
R1color                 = input.color(defval=color.new(#9698a1, 0), title='R1', inline='03', group=_group_SR)
R2color                 = input.color(defval=color.new(#9698a1, 50), title='R2', inline='03', group=_group_SR)
R3color                 = input.color(defval=color.new(#9698a1, 26), title='R3', inline='03', group=_group_SR)
R4color                 = input.color(defval=color.new(#7cff01, 0), title='R4', inline='03', group=_group_SR, tooltip = 'These candles will change colors if the close is greater than R1, R2, R3, R4. You may change each color as needed.')

i_show_support          = input.bool(false, 'Support',    group=_group_SR, inline='04')
S1color                 = input.color(defval=color.new(#ff0303, 0), title='S1', inline='04', group=_group_SR)
S2color                 = input.color(defval=color.new(#b50505, 50), title='S2', inline='04', group=_group_SR)
S3color                 = input.color(defval=color.new(#880505, 30), title='S3', inline='04', group=_group_SR)
S4color                 = input.color(defval=color.new(#000000, 0), title='S4', inline='04', group=_group_SR, tooltip = 'These candles will change colors if the close is less than S1, S2, S3, S4. You may change each color as needed.')

////////////////////
// Pivots
////////////////////

// @function Calculates the pivot point and returns its value.
// @param _type Specifies the type of pivot point.
// @param _open The open price
// @param _high The high price
// @param _low The low price
// @param _clsoe The close price
// @returns Returns the value of the calculated pivot point as a tuple.
pivots (_type, _open, _high, _low, _close) =>
    PP = 0.0
    R1 = 0.0, R2 = 0.0, R3 = 0.0, R4 = 0.0, R5 = 0.0
    S1 = 0.0, S2 = 0.0, S3 = 0.0, S4 = 0.0, S5 = 0.0
    
    if _type == 'Traditional'
        PP := (_high + _low + _close) / 3
        R1 := PP + PP - _low
        S1 := PP - (_high - PP)
        R2 := PP + _high - _low
        S2 := PP - (_high - _low)
        R3 := _high + 2 * (PP - _low)
        S3 := _low - 2 * (_high - PP)
    
        true

    else if _type == 'Fibonacci'
        PP := (_high + _low + _close) / 3
        R1 := PP + (_high - _low) * 0.382
        S1 := PP - (_high - _low) * 0.382
        R2 := PP + (_high - _low) * 0.618
        S2 := PP - (_high - _low) * 0.618
        R3 := PP + (_high - _low) * 1.000
        S3 := PP - (_high - _low) * 1.000
        R4 := PP + (_high - _low) * 1.272
        S4 := PP - (_high - _low) * 1.272
        R5 := PP + (_high - _low) * 1.618
        S5 := PP - (_high - _low) * 1.618
        
        true
    
    else if _type == 'Woodie'
        PP := (_high + _low + 2 * _open) / 4
        R1 := PP + PP - _low
        S1 := PP - (_high - PP)
        R2 := PP + _high - _low
        S2 := PP - (_high - _low)
        R3 := _high + 2 * (PP - _low)
        S3 := _low - 2 * (_high - PP)
        R4 := R3 + _high - _low
        S4 := S3 - (_high - _low)
    
        true

    else if _type == 'Classic'
        PP := (_high + _low + _close) / 3
        pivot_range = _high - _low
        R1 := PP * 2 - _low
        S1 := PP * 2 - _high
        R2 := PP + 1 * pivot_range
        S2 := PP - 1 * pivot_range
        R3 := PP + 2 * pivot_range
        S3 := PP - 2 * pivot_range
        R4 := PP + 3 * pivot_range
        S4 := PP - 3 * pivot_range
        
        true
    
    else if _type == 'DM'
        pivotX_Demark_X = _high + _low * 2 + _close

        if _close == _open
            pivotX_Demark_X := _high + _low + _close * 2
        if _close > _open
            pivotX_Demark_X := _high * 2 + _low + _close

        PP := pivotX_Demark_X / 4
        R1 := pivotX_Demark_X / 2 - _low
        S1 := pivotX_Demark_X / 2 - _high
    
    else if _type == 'Camarilla'
        PP := (_high + _low + _close) / 3
        pivot_range = _high - _low
        R1 := _close + pivot_range * 1.1 / 12.0
        S1 := _close - pivot_range * 1.1 / 12.0
        R2 := _close + pivot_range * 1.1 / 6.0
        S2 := _close - pivot_range * 1.1 / 6.0
        R3 := _close + pivot_range * 1.1 / 4.0
        S3 := _close - pivot_range * 1.1 / 4.0
        R4 := _close + pivot_range * 1.1 / 2.0
        S4 := _close - pivot_range * 1.1 / 2.0

        true

    else if _type == 'Expected Pivot Points'
        PP := (_high + _low + _close) / 3
        R1 := PP * 2 - _low
        S1 := PP * 2 - _high
        R2 := PP + (R1 - S1)
        S2 := PP - (R1 - S1)
        
        true

    [PP, R1, S1, R2, S2, R3, S3, R4, S4, R5, S5]
    
// @function Calculate the Central Pivot Range
// @param _high The high price
// @param _low The low price
// @param _clsoe The close price
// @returns Returns the values as a tuple.
f_cpr (_high, _low, _close) =>
    PP = (_high + _low + _close) / 3
    BC = (_high + _low) / 2
    TC = PP - BC + PP
    CPR = math.abs(TC - BC)

    [BC, TC, CPR]

// @function Calculate the HTF values
// @param _htf Resolution
// @returns Returns the values as a tuple.
f_htf_ohlc (_htf) =>
    var htf_o  = 0., var htf_h  = 0., var htf_l  = 0.,     htf_c  = close  
    var htf_ox = 0., var htf_hx = 0., var htf_lx = 0., var htf_cx = 0.

    if ta.change(time(_htf))
        htf_ox := htf_o, htf_o := open
        htf_hx := htf_h, htf_h := high
        htf_lx := htf_l, htf_l := low
        htf_cx := htf_c[1]
    else
        htf_h  := math.max(high, htf_h)
        htf_l  := math.min(low , htf_l)

    [htf_ox, htf_hx, htf_lx, htf_cx, htf_o, htf_h, htf_l, htf_c]



////////////////////
// Exports
////////////////////

// @function Calculates the pivot point and returns its value.
// @param _type Specifies the type of pivot point.
// @param _open The open price
// @param _high The high price
// @param _low The low price
// @param _clsoe The close price
// @returns Returns the value of the calculated pivot point as a tuple.
// pivots (simple string _type, float _open, float _high, float _low, float _close) => 
//     f_pivots(_type, _open, _high, _low, _close)

// @function Calculate the Central Pivot Range
// @param _high The high price
// @param _low The low price
// @param _clsoe The close price
// @returns Returns the values as a tuple.
cpr (float _high, float _low, float _close) => f_cpr(_high, _low, _close)

// @function Calculate the HTF values
// @param _htf Resolution
// @returns Returns the values as a tuple.
htf_ohlc (simple string _htf) => f_htf_ohlc(_htf)

f_render_pivots_label (_show, _x, _y, _text, _color, _style, _xloc, _show_history) =>
    var label my_label = na
    
    if _show
        v_price = str.format('{0,number,#.###}', _y)
        v_text = ''

        if i_pivots_label == option_pivot_label1
            v_text := _text
        else if i_pivots_label == option_pivot_label2
            v_text := _text + ' (' + v_price + ')'
        else if i_pivots_label == option_pivot_label3
            v_text := v_price

        my_label := label.new(_x, _y, v_text, textcolor=_color, color=c_none, style=_style, size=size.normal, xloc=_xloc)

        if not _show_history
            label.delete(my_label[1])

f_render_pivots_box (_show, _x1, _y1, _x2, _y2, _color, _xloc, _show_history, _should_delete) =>
    var box my_box = na
    if _show
        my_box := box.new(_x1, _y1, _x2, _y2, bgcolor=color.new(_color, i_pivots_zone_transp), border_color=c_none, xloc=_xloc)
        if (not _show_history) or _should_delete
            box.delete(my_box[1])

f_render_pivots_line (_show, _x1, _y, _x2, _width, _color, _style, _xloc, _show_history, _should_delete) =>
    var line my_line = na
    if _show and _y > 0
        my_line := line.new(_x1, _y, _x2, _y, width=_width, color=color.new(_color, i_pivots_line_transp), style=_style, xloc=_xloc)
        if (not _show_history) or _should_delete
            line.delete(my_line[1])
    my_line


f_render_pivots (_show, _show_history, _xloc, _update=false, _x1=0, _x2=0, _should_delete=false) =>
    if _show
        time_x1  = 0
        time_x2  = 0
        offset = 0

        if _xloc == xloc.bar_time
            time_x11  = ta.valuewhen(ta.change(time(usePivotTimeframe)), time, 1)
            time_x1  := ta.valuewhen(ta.change(time(usePivotTimeframe)), time, 0)
            offset   := math.round(ta.change(time))
            time_x2  := (2 * time_x1 - time_x11) - offset
        else
            time_x1  := _x1
            time_x2  := _x2
    
        [O1, H1, L1, C1, O0, H0, L0, C0] = htf_ohlc(usePivotTimeframe)

        O = _update ? O0 : O1 
        H = _update ? H0 : H1 
        L = _update ? L0 : L1 
        C = _update ? C0 : C1 

        [PP, R1, S1, R2, S2, R3, S3, R4, S4, R5, S5] = pivots(usePivotType, O, H, L, C)
        [BC, TC, CPR] = cpr(H, L, C)

        if ta.change(time(usePivotTimeframe)) or _update
            // Lines
            
            f_render_pivots_line(true, time_x1, R1, time_x2, i_pivots_line_thickness, color.red, i_pivots_line_style, _xloc, _show_history, _should_delete)
            f_render_pivots_line(true, time_x1, R2, time_x2, i_pivots_line_thickness, color.red, i_pivots_line_style, _xloc, _show_history, _should_delete)
            f_render_pivots_line(true, time_x1, R3, time_x2, i_pivots_line_thickness, color.red, i_pivots_line_style, _xloc, _show_history, _should_delete)
            f_render_pivots_line(true, time_x1, R4, time_x2, i_pivots_line_thickness, color.red, i_pivots_line_style, _xloc, _show_history, _should_delete)
            f_render_pivots_line(true, time_x1, R5, time_x2, i_pivots_line_thickness, color.red, i_pivots_line_style, _xloc, _show_history, _should_delete)
            
            f_render_pivots_line(true, time_x1, PP, time_x2, 3, color.green, line.style_dotted, _xloc, _show_history, _should_delete)
            
            f_render_pivots_line(true, time_x1, S1, time_x2, i_pivots_line_thickness, color.blue, i_pivots_line_style, _xloc, _show_history, _should_delete)
            f_render_pivots_line(true, time_x1, S2, time_x2, i_pivots_line_thickness, color.blue, i_pivots_line_style, _xloc, _show_history, _should_delete)
            f_render_pivots_line(true, time_x1, S3, time_x2, i_pivots_line_thickness, color.blue, i_pivots_line_style, _xloc, _show_history, _should_delete)
            f_render_pivots_line(true, time_x1, S4, time_x2, i_pivots_line_thickness, color.blue, i_pivots_line_style, _xloc, _show_history, _should_delete)
            f_render_pivots_line(true, time_x1, S5, time_x2, i_pivots_line_thickness, color.blue, i_pivots_line_style, _xloc, _show_history, _should_delete)
            // f_render_pivots_line(i_pivots_show_cpr, time_x1, BC, time_x2, 1, c_CPR, line.style_dotted, _xloc, _show_history, _should_delete)
            // f_render_pivots_line(i_pivots_show_cpr, time_x1, TC, time_x2, 1, c_CPR, line.style_dotted, _xloc, _show_history, _should_delete)
            
            // Boxes
            if i_pivots_show_zone
                f_render_pivots_box(true, time_x1, R1, time_x2, R2, color.red, _xloc, _show_history, _should_delete)
                f_render_pivots_box(true, time_x1, R3, time_x2, R4, color.red, _xloc, _show_history, _should_delete)
                f_render_pivots_box(true, time_x1, S1, time_x2, S2, color.blue, _xloc, _show_history, _should_delete)
                f_render_pivots_box(true, time_x1, S3, time_x2, S4, color.blue, _xloc, _show_history, _should_delete)
                // f_render_pivots_box(i_pivots_show_cpr, time_x1, BC, time_x2, TC, c_CPR, _xloc, _show_history, _should_delete)
    
            // Labels
            if i_pivots_label_show
                label_x     = i_pivots_label_position == 'Left' ? time_x1 : time_x2
                label_style = i_pivots_label_position == 'Left' ? label.style_label_right : label.style_label_left
                f_render_pivots_label(true, label_x, PP, t_PP, color.new(color.green, 20), label_style, _xloc, _show_history)
                
                f_render_pivots_label(true, label_x, R5, t_R5, color.new(color.red, 30), label_style, _xloc, _show_history)
                f_render_pivots_label(true, label_x, R4, t_R4, color.new(color.red, 30), label_style, _xloc, _show_history)
                f_render_pivots_label(true, label_x, R3, t_R3, color.new(color.red, 30), label_style, _xloc, _show_history)
                f_render_pivots_label(true, label_x, R2, t_R2, color.new(color.red, 30), label_style, _xloc, _show_history)
                f_render_pivots_label(true, label_x, R1, t_R1, color.new(color.red, 30), label_style, _xloc, _show_history)
                
                f_render_pivots_label(true, label_x, S1, t_S1, color.new(color.blue, 30), label_style, _xloc, _show_history)
                f_render_pivots_label(true, label_x, S2, t_S2, color.new(color.blue, 30), label_style, _xloc, _show_history)
                f_render_pivots_label(true, label_x, S3, t_S3, color.new(color.blue, 30), label_style, _xloc, _show_history)
                f_render_pivots_label(true, label_x, S4, t_S4, color.new(color.blue, 30), label_style, _xloc, _show_history)
                f_render_pivots_label(true, label_x, S5, t_S5, color.new(color.blue, 30), label_style, _xloc, _show_history)
                // f_render_pivots_label(i_pivots_show_cpr, label_x, BC, t_BC, color.new(c_CPR, 30), label_style, _xloc, _show_history)
                // f_render_pivots_label(i_pivots_show_cpr, label_x, TC, t_TC, color.new(c_CPR, 30), label_style, _xloc, _show_history)

f_render_pivots(showPreviousPivots, showPreviousPivots2, xloc.bar_time, false, 0, 0, false)

htf_o = request.security(syminfo.tickerid, usePivotTimeframe, open  )
htf_h = request.security(syminfo.tickerid, usePivotTimeframe, high  )
htf_l = request.security(syminfo.tickerid, usePivotTimeframe, low   )
htf_c = request.security(syminfo.tickerid, usePivotTimeframe, close )


// [PP, R1, S1, R2, S2, R3, S3, R4, S4, R5, S5] = pivots(usePivotType, O, H, L, C)
// Expose
[PP, R1, S1, R2, S2, R3, S3, R4, S4, R5, S5] = pivots(usePivotType, htf_o[1], htf_h[1], htf_l[1], htf_c[1])


[D1PP, D1R1, D1S1, D1R2, D1S2, D1R3, D1S3, D1R4, D1S4, D1R5, D1S5] = pivots("D", htf_o[1], htf_h[1], htf_l[1], htf_c[1])
[W_PP, W_R1, W_S1, W_R2, W_S2, W_R3, W_S3, W_R4, W_S4, W_R5, W_S5] = pivots("W", htf_o[1], htf_h[1], htf_l[1], htf_c[1])

test = true
plot( test == true ? W_R1 : na, "W_R1", color = R4color, linewidth = 3)


plot( showPivots == true ? R4 : na, "R4", color = R4color, linewidth = 3)
plot( showPivots == true ? R3 : na, "R3", color = R3color)
plot( showPivots == true ? R2 : na, "R2", color = R2color)
plot( showPivots == true ? R1 : na, "R1", color = R1color)
plot( showPivots == true ? PP : na, "PP", color = color.new(#37c205, 26))
plot( showPivots == true ? S1 : na, "S1", color = S1color)
plot( showPivots == true ? S2 : na, "S2", color = S2color)
plot( showPivots == true ? S3 : na, "S3", color = S3color)
plot( showPivots == true ? S4 : na, "S4", color = S4color, linewidth = 3)

showR1      = input.bool(true, 'R1',               group="pivots", inline="R")
showR2      = input.bool(true, 'R2',               group="pivots", inline="R")
showR3      = input.bool(true, 'R3',               group="pivots", inline="R")
showR4      = input.bool(true, 'R4',               group="pivots", inline="R")

showS1      = input.bool(true, 'S1',               group="pivots", inline="S")
showS2      = input.bool(true, 'S2',               group="pivots", inline="S")
showS3      = input.bool(true, 'S3',               group="pivots", inline="S")
showS4      = input.bool(true, 'S4',               group="pivots", inline="S")



// Bullish 
ResistenceCondition1 = close >= R1 and close <= R2
ResistenceCondition2 = close >= R2 and close <= R3
ResistenceCondition3 = close >= R3 and close <= R4
ResistenceCondition4 = close >= R4

barcolor(i_show_resistance and greenCandle and close >= R1 and close <= R2? R1color : na)
barcolor(i_show_resistance and greenCandle and close >= R2 and close <= R3? R2color : na)
barcolor(i_show_resistance and greenCandle and close >= R3 and close <= R4? R3color : na)
barcolor(i_show_resistance and greenCandle and close >= R4 ? R4color : na)

// Bearish
supportCondition1 = close <= S1 and close >= S2
supportCondition2 = close <= S2 and close >= S3
supportCondition3 = close <= S3 and close >= S4
supportCondition4 = close <= S4
barcolor(i_show_support and supportCondition1 ? S1color : na)
barcolor(i_show_support and supportCondition2  ? S2color : na)
barcolor(i_show_support and supportCondition3  ? S3color : na)
barcolor(i_show_support and supportCondition4 ? S4color : na)


//// Bullish
if showR1 and greenCandle and ResistenceCondition1
    label.new(bar_index, patternLabelPosHigh, text=str.tostring('R1'), tooltip ="", style=label.style_label_down, color=color.green, textcolor=color.black)
if showR2 and greenCandle and ResistenceCondition2
    label.new(bar_index, patternLabelPosHigh, text=str.tostring('R2'), tooltip ="", style=label.style_label_down, color=color.green, textcolor=color.black)
if showR3 and greenCandle and ResistenceCondition3
    label.new(bar_index, patternLabelPosHigh, text=str.tostring('R3'), tooltip ="", style=label.style_label_down, color=color.green, textcolor=color.black)
if showR4 and greenCandle and ResistenceCondition4
    label.new(bar_index, patternLabelPosHigh, text=str.tostring('R4'), tooltip ="", style=label.style_label_down, color=color.green, textcolor=color.black)

//// Bearish
if showS1 and redCandle and supportCondition1
    label.new(bar_index, patternLabelPosLow, text=str.tostring('S1'), tooltip ="", style=label.style_label_up, color=color.red, textcolor=color.black)
if showS2 and redCandle and supportCondition2
    label.new(bar_index, patternLabelPosLow, text=str.tostring('S2'), tooltip ="", style=label.style_label_up, color=color.red, textcolor=color.black)
if showS3 and redCandle and supportCondition3
    label.new(bar_index, patternLabelPosLow, text=str.tostring('S3'), tooltip ="", style=label.style_label_up, color=color.red, textcolor=color.black)
if showS4 and redCandle and supportCondition4
    label.new(bar_index, patternLabelPosLow, text=str.tostring('S4'), tooltip ="", style=label.style_label_up, color=color.red, textcolor=color.black)


// If the open, close, high, and low are all above R1, this is a strong bullish signal
// barcolor(input_show_basic and (open >= R1 and close >= R1 and high >= R1 and low >= R1) ? BULLcolor : na)

//If the open, close, high, and low are all below S1, this is a strong bearish signal
// barcolor(input_show_basic and (open <= S1 and close <= S1 and high <= S1 and low <= S1) ? BEARcolor : na)

//// Stoploss
// If the open is above R1 but the close is below R1, this is a sign of weakness in the bulls. It suggests that the bears are starting to gain control and that the price may be headed lower.
// barcolor(i_candle_show and (open >= R1 and close <= R1) ? BEARcolor : na, title="close long")

// If the open is below S1 but the close is above S1, this is a sign of weakness in the bears. It suggests that the bulls are starting to gain control and that the price may be headed higher.
// barcolor(i_candle_show and (open >= R1 and close <= R1) ? BEARcolor : na, title="close short")

// If the high is above R1 and the low is below S1, this is a sign of a possible trend reversal. This suggests that the bulls and bears are evenly matched and that the price is likely to break out in one direction or the other soon.
// barcolor(input_show_basic and (high >= R1 and low <= S1) ? BreakOUTcolor : na)


////# VOLUME-Based EMA Candles
////////////////////////////////////////////////////////////////////{
__groupCandles = 'Trend Candles'
////# Candle Colors
// weak trends 
readCandleSticks    = input.bool(defval=false, title='Use TREND Candles', group=__groupCandles, inline='03')
_emaDOWN            = input.color(defval=color.new(#660000, 0), title='', inline='03', group=__groupCandles)
_StrongDown         = input.color(defval=color.new(#004d40, 0), title='', inline='03', group=__groupCandles)
// neutral 
_naCandle           = input.color(defval=color.new(#000000, 0), title='', inline='03', group=__groupCandles)
// strong trends
_emaUP              = input.color(defval=color.new(#009688, 0), title='', inline='03', group=__groupCandles)
_StrongUP           = input.color(defval=color.new(#ffeb3b, 0), title='', inline='03', group=__groupCandles)

__groupVolume = 'Volume Settings'
////# Volume Candles
useVolume   = input.bool(defval=true, title='Use Volume Opacity?', group=__groupVolume, inline='00')
length      = input.int(21, 'volume', minval=1, group=__groupVolume, inline='00')
volumeDown1 = input.int(100, 'Bearish: ', minval=1, group=__groupVolume, inline='01')
volumeDown2 = input.int(50, '', minval=1, group=__groupVolume, inline='01')
volumeDown3 = input.int(100, '', minval=1, group=__groupVolume, inline='01')
///
volumeUp1 = input.int(1, 'Bullish', minval=1, group=__groupVolume, inline='02')
volumeUp2 = input.int(50, '', minval=1, group=__groupVolume, inline='02')
volumeUp3 = input.int(1, '', minval=1, group=__groupVolume, inline='02')



//EMA CANDLESTICKS
fe = ta.ema(close, 6)
se = ta.ema(close, 25)

isFastOverSlow = fe > se
isCrossUnderSlow = ta.crossunder(close, se) 
isCrossOverSlow = ta.crossover(close, se) 

//// Trends
isUp         = close > fe
isStrongDown = close < se
isDown       = close < fe 
isStrongUp   = close > se  


////    Coloring Algorithm  ////
////# Volume
// avrg    = ta.vwma(volume, length)

avrg = ta.sma(volume, length)
vold1 = volume > avrg  * 1.5 and redCandle
vold2 = volume >= avrg * 0.5 and volume <= avrg * 1.5 and redCandle
vold3 = volume < avrg  * 0.5 and redCandle

volu1 = volume > avrg  * 1.5 and greenCandle
volu2 = volume >= avrg * 0.5 and volume <= avrg * 1.5 and greenCandle
volu3 = volume < avrg  * 0.5 and greenCandle


////# Convert EMA colors to volume-based colors
createVolumeCandles(_color) =>
    color = vold1 ? color.new(_color, volumeDown1) : vold2 ? color.new(_color, volumeDown2) : vold3 ? color.new(_color, volumeDown3) : volu1 ? color.new(_color, volumeUp1) : volu2 ? color.new(_color, volumeUp2) : volu3 ? color.new(_color, volumeUp3) : na
    color
//// Pass in user selected color, than adjust opacity based on volume and return a new color
//// The returned color will than be passed into BC
___emaDOWN = useVolume ? createVolumeCandles(_emaDOWN) : _emaDOWN
___StrongDown = useVolume ? createVolumeCandles(_StrongDown) : _StrongDown
// neutral 
___naCandle = useVolume ? createVolumeCandles(_naCandle) : _naCandle
// strong trends
___emaUP = useVolume ? createVolumeCandles(_emaUP) : _emaUP
___StrongUP = useVolume ? createVolumeCandles(_StrongUP) : _StrongUP

////    Coloring Algorithm  ////
bc              = isFastOverSlow ? isCrossUnderSlow ? ___naCandle : isUp ? ___emaUP : isStrongUp ? ___StrongUP : _naCandle : isCrossOverSlow ? ___naCandle : isDown ? ___emaDOWN : isStrongDown ? ___StrongDown : isUp ? isStrongUp ? ___StrongUP : na : na

barcolor( readCandleSticks ? bc : na )


////# floor
// barcolor( not readCandleSticks and useVolume and (volu1) and (i_obos and underBought) ? color.new(color.blue, 1) : na )
barcolor( not readCandleSticks and useVolume and (volu1) ? color.new(_StrongDown, volumeUp1) : na )
barcolor( not readCandleSticks and useVolume and (volu2) ? color.new(#00AEAD, volumeUp2) : na )
barcolor( not readCandleSticks and useVolume and (volu3) ? color.new(#019875, volumeUp3) : na )

////# ceiling
barcolor( not readCandleSticks and useVolume and (vold1) ? color.new(_emaDOWN, 1) : na )
barcolor( not readCandleSticks and useVolume and (vold2) ? color.new(_emaDOWN, 50) : na )
barcolor( not readCandleSticks and useVolume and (vold3) ? color.new(_emaDOWN, 90) : na )


////////////////////////////////////////////////////////////////////}
////# Alerts
////////////////////////////////////////////////////////////////////{
// alertcondition(ta.crossover(close, R1), title = "Price crossed R1", message = "Price crossed above R1")
// alertcondition(ta.crossunder(close, S1), title = "Price crossed R1", message = "Price crossed above R1")



////////////////////////////////////////////////////////////////////}
////# Table
////////////////////////////////////////////////////////////////////{
_group_Spreads            = "Spreads"
customBuyOption     = input.string('R1', 'Long↕', inline='01', options=['S1', 'S2', 'S3', 'S4', 'Pivot', 'R1', 'R2', 'R3', 'R4'], group=_group_Spreads)
customLongExit      = input.string('R3', 'Exit↕', inline='01', options=['S1', 'S2', 'S3', 'S4', 'Pivot', 'R1', 'R2', 'R3', 'R4'], group=_group_Spreads)
// Bearish
customSellOption    = input.string('S1', 'Short↕', inline='02', options=['S1', 'S2', 'S3', 'S4', 'Pivot', 'R1', 'R2', 'R3', 'R4'], group=_group_Spreads)
customSellExit      = input.string('S3', 'Exit ↕', inline='02', options=['S1', 'S2', 'S3', 'S4', 'Pivot', 'R1', 'R2', 'R3', 'R4'], group=_group_Spreads)

customQuantity      = input.float(100.0, title='Quantity', inline='03', group=_group_Spreads)
customFEE           = input.float(0.001, title='Exchange Fee', inline='03', group=_group_Spreads)
useRound            = input(false, title = "Round?",inline = "00", group=_group_Spreads)
hideTable           = input.bool(defval=true, title='Hide Table', inline='00', group=_group_Spreads)

printProfit(_buy, _sell) =>  //{
    _fee = customFEE  //0.001
    netBuy = _buy - _buy * _fee
    netSell = _sell - _sell * _fee
    netProfit = netSell - netBuy
    customQuantity > 0 ? str.tostring(netProfit * customQuantity) : str.tostring(netProfit * customQuantity)
//}  


__roundPrice(value) =>  str.tostring(useRound ? math.floor(value) : value) // requried utility

group_pos = "Table Position & Size & Colors"
string  i_tableYpos      = input.string("bottom",      "↕",   inline = "01", group = group_pos, options = ["top", "middle", "bottom"])
string  i_tableXpos      = input.string("right",    "↔",   inline = "01", group = group_pos, options = ["left", "center", "right"], tooltip = "Position on the chart.")
int     i_tableRowHeight = input.int(0,          "|",   inline = "02", group = group_pos, minval = 0, maxval = 100)
int     i_tableColWidth  = input.int(0,          "—",   inline = "02", group = group_pos, minval = 0, maxval = 100, tooltip = "0-100. Use 0 to auto-size height and width.")
string  i_textSize       = input.string("Large", "Table Text Size", options = ["Auto", "Tiny", "Small", "Normal", "Large", "Huge"], group = group_pos)

string  textSize         = i_textSize == "Auto" ? size.auto : i_textSize == "Tiny" ? size.tiny : i_textSize == "Small" ? size.small : i_textSize == "Normal" ? size.normal : i_textSize == "Large" ? size.large : size.huge

row_col                  = input(color.blue, "Headers", inline="03", group = group_pos)
col_col                  = input(color.blue, " ", inline="03", group = group_pos)
poscol                   = input(color.green, "Bull Color", inline="04", group = group_pos)
neutralcolor             = input(color.gray, "Neutral Color", inline="04", group = group_pos)
negcol                   = input(color.red, "Bear Color", inline="04", group = group_pos)


int     i_barsBack = input.int(0,          "|",   inline = "02", group = group_pos, minval = 0, maxval = 100)
//////////////////////////////////////////////////////////////////////////
///
___customBuy        = customBuyOption   == 'R1' ? R1 : customBuyOption == 'R2' ? R2 : customBuyOption == 'R3' ? R3 : customBuyOption   == 'R4' ? R4 : customBuyOption == 'Pivot' ? PP : customBuyOption == 'S1' ? S1 : customBuyOption == 'S2' ? S2 : customBuyOption == 'S3' ? S3 : customBuyOption   == 'S4' ? 1 : na
___customLongExit   = customLongExit    == 'R1' ? R1 : customLongExit == 'R2' ? R2 : customLongExit == 'R3' ? R3 : customLongExit   == 'R4' ? R4 : customLongExit == 'Pivot' ? PP : customLongExit == 'S1' ? S1 : customLongExit == 'S2' ? S2 : customLongExit == 'S3' ? S3 : customLongExit   == 'S4' ? 1 : na
___customSell       = customSellOption  == 'R1' ? R1 : customSellOption == 'R2' ? R2 : customSellOption == 'R3' ? R3 : customSellOption   == 'R4' ? R4 : customSellOption == 'Pivot' ? PP : customSellOption == 'S1' ? S1 : customSellOption == 'S2' ? S2 : customSellOption == 'S3' ? S3 : customSellOption   == 'S4' ? 1 : na
___customSellExit   = customSellExit    == 'R1' ? R1 : customSellExit == 'R2' ? R2 : customSellExit == 'R3' ? R3 : customSellExit   == 'R4' ? R4 : customSellExit == 'Pivot' ? PP : customSellExit == 'S1' ? S1 : customSellExit == 'S2' ? S2 : customSellExit == 'S3' ? S3 : customSellExit   == 'S4' ? 1 : na

//{ Trading Zone 
var table anan = table.new(i_tableYpos + "_" + i_tableXpos, 10, 10, border_width = 3) 

if barstate.islast and hideTable
    table.cell(anan, 1, 0, "Entry #", text_color = col_col, bgcolor = color.new(col_col, 80), text_size = textSize, width= i_tableColWidth, height= i_tableRowHeight)
    table.cell(anan, 2, 0, "Exit #", text_color = col_col, bgcolor = color.new(col_col, 80), text_size = textSize, width= i_tableColWidth, height= i_tableRowHeight)
    table.cell(anan, 3, 0, "Profit", text_color = col_col, bgcolor = color.new(col_col, 80), text_size = textSize, width= i_tableColWidth, height= i_tableRowHeight)
if barstate.islast and hideTable
    table.cell(anan, 0, 2,  "Bull Spread", text_color = row_col, bgcolor = color.new(poscol, 80), text_size = textSize, width= i_tableColWidth, height= i_tableRowHeight)
    table.cell(anan, 1, 2, str.tostring( useRound ? math.floor(___customBuy)      :___customBuy), text_color = color.new(negcol, 50), bgcolor = color.new(poscol, 80), text_size = textSize, width= i_tableColWidth, height= i_tableRowHeight)
    table.cell(anan, 2, 2, str.tostring( useRound ? math.floor(___customLongExit) :___customLongExit), text_color = color.new(negcol, 50), bgcolor = color.new(poscol, 80), text_size = textSize, width= i_tableColWidth, height= i_tableRowHeight)
    table.cell(anan, 3, 2, printProfit(___customBuy,___customLongExit), text_color = color.new(poscol, 50), bgcolor = color.new(poscol, 80), text_size = textSize, width= i_tableColWidth, height= i_tableRowHeight)
// if barstate.islast and hideTable
//     table.cell(anan, 0, 3,"Previous Zone: ", text_color = row_col, bgcolor = color.new(row_col, 80), text_size = textSize, width= i_tableColWidth, height= i_tableRowHeight)
//     table.cell(anan, 1, 3, str.tostring( useRound ? math.floor(lowUsePivot)   : lowUsePivot),  text_color = color.new(negcol, 50), bgcolor = color.new(negcol, 80), text_size = textSize, width= i_tableColWidth, height= i_tableRowHeight)
//     table.cell(anan, 2, 3, str.tostring( useRound ? math.floor(highUsePivot)  : highUsePivot),  text_color = color.new(negcol, 50), bgcolor = color.new(negcol, 80), text_size = textSize, width= i_tableColWidth, height= i_tableRowHeight)
//     table.cell(anan, 3, 3, printProfit(lowUsePivot,highUsePivot), text_color = color.new(poscol, 50), bgcolor = color.new(poscol, 80), text_size = textSize, width= i_tableColWidth, height= i_tableRowHeight)
if barstate.islast and hideTable
    table.cell(anan, 0, 4,  "Bear Spread", text_color = row_col, bgcolor = color.new(negcol, 80),  text_size = textSize, width= i_tableColWidth, height= i_tableRowHeight)
    table.cell(anan, 1, 4,  str.tostring(useRound ? math.floor(___customSell)     : ___customSell  ), text_color = color.new(negcol, 50), bgcolor = color.new(negcol, 80), text_size = textSize, width= i_tableColWidth, height= i_tableRowHeight)
    table.cell(anan, 2, 4,  str.tostring(useRound ? math.floor(___customSellExit) : ___customSellExit  ), text_color = color.new(negcol, 50), bgcolor = color.new(negcol, 80), text_size = textSize, width= i_tableColWidth, height= i_tableRowHeight)
    table.cell(anan, 3, 4,  printProfit(___customSell,___customSellExit), text_color = color.new(poscol, 50), bgcolor = color.new(poscol, 80), text_size = textSize, width= i_tableColWidth, height= i_tableRowHeight)

    // table.cell(anan, 0, 9,  "previous S1", text_color = row_col, bgcolor = color.new(row_col, 80),  text_size = textSize, width= i_tableColWidth, height= i_tableRowHeight)
    // table.cell(anan, 1, 9, str.tostring(S1[1]), text_color = row_col, bgcolor = color.new(row_col, 80),  text_size = textSize, width= i_tableColWidth, height= i_tableRowHeight)
