//@version=5
indicator("Weekly Seasonality with Market Segments (Custom Hours)", overlay = false)

// Initialize arrays to store daily returns for different time segments
var float[] monPreMarket = array.new_float(0)
var float[] tuePreMarket = array.new_float(0)
var float[] wedPreMarket = array.new_float(0)
var float[] thuPreMarket = array.new_float(0)
var float[] friPreMarket = array.new_float(0)

var float[] monMarket = array.new_float(0)
var float[] tueMarket = array.new_float(0)
var float[] wedMarket = array.new_float(0)
var float[] thuMarket = array.new_float(0)
var float[] friMarket = array.new_float(0)

var float[] monPostMarket = array.new_float(0)
var float[] tuePostMarket = array.new_float(0)
var float[] wedPostMarket = array.new_float(0)
var float[] thuPostMarket = array.new_float(0)
var float[] friPostMarket = array.new_float(0)

// Determine the time segment for the current bar
isPreMarket = (hour(time) >= 4 and hour(time) < 9) or (hour(time) == 9 and minute(time) < 30)
isMarket = (hour(time) >= 9 and hour(time) < 16) or (hour(time) == 16 and minute(time) == 0)
isPostMarket = (hour(time) >= 16 and hour(time) < 20)

// Calculate the return for the bar
dailyReturn = close / close[1] - 1

// Store returns based on the day of the week and time segment
if isPreMarket
    if dayofweek == dayofweek.monday
        array.push(monPreMarket, dailyReturn)
    if dayofweek == dayofweek.tuesday
        array.push(tuePreMarket, dailyReturn)
    if dayofweek == dayofweek.wednesday
        array.push(wedPreMarket, dailyReturn)
    if dayofweek == dayofweek.thursday
        array.push(thuPreMarket, dailyReturn)
    if dayofweek == dayofweek.friday
        array.push(friPreMarket, dailyReturn)

if isMarket
    if dayofweek == dayofweek.monday
        array.push(monMarket, dailyReturn)
    if dayofweek == dayofweek.tuesday
        array.push(tueMarket, dailyReturn)
    if dayofweek == dayofweek.wednesday
        array.push(wedMarket, dailyReturn)
    if dayofweek == dayofweek.thursday
        array.push(thuMarket, dailyReturn)
    if dayofweek == dayofweek.friday
        array.push(friMarket, dailyReturn)

if isPostMarket
    if dayofweek == dayofweek.monday
        array.push(monPostMarket, dailyReturn)
    if dayofweek == dayofweek.tuesday
        array.push(tuePostMarket, dailyReturn)
    if dayofweek == dayofweek.wednesday
        array.push(wedPostMarket, dailyReturn)
    if dayofweek == dayofweek.thursday
        array.push(thuPostMarket, dailyReturn)
    if dayofweek == dayofweek.friday
        array.push(friPostMarket, dailyReturn)

// Calculate average returns for each day of the week and time segment
avgMonPreMarket = array.avg(monPreMarket) * 100
avgTuePreMarket = array.avg(tuePreMarket) * 100
avgWedPreMarket = array.avg(wedPreMarket) * 100
avgThuPreMarket = array.avg(thuPreMarket) * 100
avgFriPreMarket = array.avg(friPreMarket) * 100

avgMonMarket = array.avg(monMarket) * 100
avgTueMarket = array.avg(tueMarket) * 100
avgWedMarket = array.avg(wedMarket) * 100
avgThuMarket = array.avg(thuMarket) * 100
avgFriMarket = array.avg(friMarket) * 100

avgMonPostMarket = array.avg(monPostMarket) * 100
avgTuePostMarket = array.avg(tuePostMarket) * 100
avgWedPostMarket = array.avg(wedPostMarket) * 100
avgThuPostMarket = array.avg(thuPostMarket) * 100
avgFriPostMarket = array.avg(friPostMarket) * 100

// Create a table to display the weekly seasonality with market segments
var table weeklyTable = table.new(position.top_right, 5, 6, border_width = 1)

if barstate.islast
    // Add headers
    table.cell(weeklyTable, 0, 0, "Day", bgcolor=color.gray)
    table.cell(weeklyTable, 1, 0, "Pre-Market", bgcolor=color.gray)
    table.cell(weeklyTable, 2, 0, "Market", bgcolor=color.gray)
    table.cell(weeklyTable, 3, 0, "Post-Market", bgcolor=color.gray)

    // Add data
    table.cell(weeklyTable, 0, 1, "Mon")
    table.cell(weeklyTable, 1, 1, str.tostring(avgMonPreMarket, format.percent))
    table.cell(weeklyTable, 2, 1, str.tostring(avgMonMarket, format.percent))
    table.cell(weeklyTable, 3, 1, str.tostring(avgMonPostMarket, format.percent))

    table.cell(weeklyTable, 0, 2, "Tue")
    table.cell(weeklyTable, 1, 2, str.tostring(avgTuePreMarket, format.percent))
    table.cell(weeklyTable, 2, 2, str.tostring(avgTueMarket, format.percent))
    table.cell(weeklyTable, 3, 2, str.tostring(avgTuePostMarket, format.percent))

    table.cell(weeklyTable, 0, 3, "Wed")
    table.cell(weeklyTable, 1, 3, str.tostring(avgWedPreMarket, format.percent))
    table.cell(weeklyTable, 2, 3, str.tostring(avgWedMarket, format.percent))
    table.cell(weeklyTable, 3, 3, str.tostring(avgWedPostMarket, format.percent))

    table.cell(weeklyTable, 0, 4, "Thu")
    table.cell(weeklyTable, 1, 4, str.tostring(avgThuPreMarket, format.percent))
    table.cell(weeklyTable, 2, 4, str.tostring(avgThuMarket, format.percent))
    table.cell(weeklyTable, 3, 4, str.tostring(avgThuPostMarket, format.percent))

    table.cell(weeklyTable, 0, 5, "Fri")
    table.cell(weeklyTable, 1, 5, str.tostring(avgFriPreMarket, format.percent))
    table.cell(weeklyTable, 2, 5, str.tostring(avgFriMarket, format.percent))
    table.cell(weeklyTable, 3, 5, str.tostring(avgFriPostMarket, format.percent))
